name: Deploy to Amazon ECR

# 이 워크플로우는 main 브랜치로 push되거나 pull request가 생성될 때 실행됩니다.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3 # 최신 버전의 checkout 액션을 사용합니다.

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 접근 키
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 비밀 키
        aws-region: ${{ secrets.AWS_REGION }} # AWS 리전

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 # Amazon ECR에 로그인합니다.

    - name: Set ECR_REPOSITORY
      run: |
        # GITHUB_REPOSITORY에서 소유자 부분을 제거하여 ECR 리포지토리 이름을 설정합니다.
        echo "ECR_REPOSITORY=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Docker 이미지를 빌드하고, 태그를 지정한 후 Amazon ECR에 푸시합니다.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # Repository가 생성되지 않았거나, 권한 문제가 있을 경우 EOF가 날 수 있음.
        echo "name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
